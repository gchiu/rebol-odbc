#
# .travis.yml contains YAML-formatted (http://www.yaml.org/) instructions
# for testing the ODBC Extension for Rebol 3 (Ren-C):
#
# http://docs.travis-ci.com/
#
# This file should follow the conventions of the Ren-C project, so see the
# notes in its `.travis.yml` file on indentation and other conventions:
#
# https://github.com/metaeducation/ren-c/blob/master/.travis.yml
#

notifications:
  email: false  # committers are keeping an eye on failures, supposedly!


# Travis defaults to 50; not needed, use 3 (just 1 affects queue notification)
#
# https://docs.travis-ci.com/user/customizing-the-build/#git-clone-depth
#
git:
  depth: 3


# Each configured matrix instance has its own customized environment variables
# to give it unique behavior.  But there are also global environment keys,
# available to the overall Travis process itself (e.g. deployment)
#
# https://docs.travis-ci.com/user/environment-variables/#Global-Variables
#
env:
  global:
    - CDN=https://metaeducation.s3.amazonaws.com/travis-builds


# All Travis instances in the following "matrix" will run the same `script:`
# code (found later on in the file).  However, each instance has environment
# variables which can guide that script to behave differently.
#
# We don't compile Rebol here, but pull the latest debug builds from the main
# Ren-C process, which have been uploaded to Amazon S3.  However, it is
# helpful to keep the environment variables which were set in the corresponding
# build here.
#
# Ideally we would test the HTTPD server on Windows as well as Linux and OS X.
# But since we use Travis, we currently don't do that.
#
matrix:
  include:
    # [1] Linux x64, debug, g++
    #
    - os: linux
      dist: bionic  # needed for libodbc.so.2 in libodbc1 and libssl.so.1.1
      sudo: false  # force new container-based infrastructure.
      language: cpp
      env:
        - NUMBER=1
        - CONFIG=generic-c++.r
        - OS_ID=0.4.40
        - DEBUG=asserts
        - STANDARD=c++0x
        - RIGOROUS=yes
        - STATIC=yes
        - TCC=tcc
        - ARCH_CFLAGS=
        - WITH_FFI=dynamic  # see note about being only build w/FFI for now
        - ODBC_REQUIRES_LTDL=no
        - EXTENSIONS="ODBC + ZeroMQ + TCC + Signal + FFI +"
        - ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-3.4
        - ASAN_OPTIONS=symbolize=1
      services:
        - mysql  # https://github.com/travis-ci/travis-ci/issues/6842
      addons:
        apt:
          packages:  # need for shared libraries to run the debug r3
            - libodbc1  # for getting libodbc.so.2
            - unixodbc-dev  # for compiling the ODBC extension
            - libzmq3-dev  # for ZeroMQ extension
            - libffi-dev
            # - mysql-server  # earlier version (5) installed by default
            - sqlite3
            - libsqliteodbc
            - firebird3.0-server
            - firebird-dev

    # [2] OSX x64, debug, clang++
    #
    # @rgchris (the original author of httpd) uses OS X, so that makes it an
    # additional motivation to include it in the matrix.
    #
    - os: osx
      osx_image: xcode11  # try a newer OS X to avoid homebrew update (10.14)
      language: cpp
      env:
        - NUMBER=2
        - CONFIG=generic-c++.r
        - OS_ID=0.2.40
        - DEBUG=asserts
        - STANDARD=c++11
        - RIGOROUS=no
        - STATIC=no  # static linking switch not honored
        - WITH_FFI=dynamic
        - ODBC_REQUIRES_LTDL=no
        - EXTENSIONS="ODBC + ZeroMQ +"
        - BREW=yes
      # libraries (ODBC, ZeroMQ...) added via brew in `install` step below
      # Note: TCC extension has not been implemented for Mac


# The install step occurs before the `script:` step runs.  The language that
# was specified in the `matrix:` entry for each instance will guide certain
# default tools that will be installed.  But you can add custom steps:
#
# https://docs.travis-ci.com/user/customizing-the-build#Customizing-the-Installation-Step
#
# We install an appropriate build of Rebol.  The debug builds are "kitchen
# sink" builds, which include ZeroMQ and ODBC dependencies as shared libraries.
# It's desirable to use a debug build here so go ahead and do that.
#
install:
  - |
    #
    # The Travis OS X images have brew preinstalled, but get old and out of
    # sync with the package database.  This means brew has to update.  It's
    # supposed to do this automatically, but circa 2017 it broke in some
    # images due to the lack of a sufficiently up-to-date Ruby:
    #
    # https://github.com/travis-ci/travis-ci/issues/8552
    #
    # But even if brew can update automatically, it generates an unsightly
    # amount of output if it does so during a `brew install`.  So redirect
    # the hundreds of lines to /dev/null to shorten the Travis log.
    #
    # https://github.com/Homebrew/legacy-homebrew/issues/35662
    #
    if [[ $OS_ID = 0.2.40 ]]; then
      brew update > /dev/null

      brew install unixodbc  # for ODBC extension
      brew install zmq  # for ZeroMQ extension

      # Since OS X is the hardest platform to virtualize and test on non-Macs,
      # and @rgchris is a SQLite-on-Mac user, we test sqlite here.
      #
      brew install sqlite
      brew install sqliteodbc
    fi

  # MYSQL SETUP
  #
  # While PostgreSQL might be a more "interesting" database than MySQL,
  # there is greater popularity of MySQL on Linux.  It makes sense to use as
  # a first test.
  - |
    if [[ $OS_ID = 0.4.40 ]]; then

      # https://github.com/travis-ci/travis-ci/issues/6842#issuecomment-393163811
      #
      echo "Waiting for 'services: mysql' to say it has started..."
      which mysql && \
        until mysql -u root -e "show status" &>/dev/null; \
          do sleep 1; \
      done
      echo "...and it seems that 'services: mysql' has started."

      # Turnkey installation for MySQL's ODBC driver is available for Red Hat
      # Linux, but not Debian.  We follow the tarball installation method:
      #
      # https://dev.mysql.com/doc/connector-odbc/en/connector-odbc-installation-binary-unix-tarball.html
      #
      if [[ 1 = 2 ]]; then  # Travis installs 5.3 vs. 8.0 for some reason
        export MYODBC_DOWNLOAD=mysql-connector-odbc-8.0.17-linux-debian10-x86-64bit
        export MYODBC_VERSION=8.0
        export MYODBC_FILE=libmyodbc8w.so
      else
        export MYODBC_DOWNLOAD=mysql-connector-odbc-5.3.13-linux-debian9-x86-64bit
        export MYODBC_VERSION=5.3
        export MYODBC_FILE=libmyodbc5w.so
      fi

      wget https://dev.mysql.com/get/Downloads/Connector-ODBC/${MYODBC_VERSION}/${MYODBC_DOWNLOAD}.tar.gz
      gunzip ${MYODBC_DOWNLOAD}.tar.gz
      tar xvf ${MYODBC_DOWNLOAD}.tar
      cd ${MYODBC_DOWNLOAD}

      sudo cp bin/* /usr/local/bin
      sudo cp lib/* /usr/local/lib

      cd ..

      # Use the Unicode version, not ANSI.  Note that unixodbc's concept of
      # "unicode" is not UTF-8, but rather 16-bit WCHAR-based (matching
      # Windows).
      #
      sudo myodbc-installer -a -d -n "MySQL ODBC ${MYODBC_VERSION} Driver" \
          -t "Driver=/usr/local/lib/${MYODBC_FILE}"

      # ODBC does not like letting you use the root account w/no password as
      # a data source.  Make account `test` with password `test-password` and
      # give it access to the database.
      #
      echo "GRANT ALL PRIVILEGES ON *.* TO 'test'@'localhost' IDENTIFIED BY 'test-password';" | sudo mysql

      # The "DSN" identifying the database is "Rebol", a label stored in the
      # unixodbc %/usr/local/etc/odbc.ini (or similar).  But the actual name
      # of the MySQL database mapped to there is `test`.
      #
      # Use the test account with the test password to do this as a sanity
      # check that the privileges are granted.
      #
      echo "CREATE DATABASE test" | mysql --host=localhost --user=test --password=test-password

      # Register that DSN.  The `odbc://rebol-mysql` syntax for naming a DSN
      # is Rebol-specific, typically it would just be `Rebol` in a context
      # that knows a DSN is supposed to be in that position.
      #
      # NOTE: if you have problems with `localhost` saying can't connect with
      # socket /tmp/mysql.sock, and you are sure the mysql daemon is running,
      # then on some Linux installations using `127.0.0.1` instead can help
      # force not to go through a socket.  That doesn't solve the problem if
      # you actually want to talk to a database over a network, but is good
      # enough for this test (and other purposes).
      #
      sudo myodbc-installer -s -a -c2 -n "rebol-mysql" \
          -t "DRIVER=MySQL ODBC ${MYODBC_VERSION} Driver;SERVER=localhost;DATABASE=test;UID=test;PWD=test-password"
    fi

  # SQLITE SETUP
  - |
    if [[ $OS_ID = 0.4.40 ]]; then
      #
      # There is a tool called `odbcinst` which supposedly registers ODBC
      # drivers, but it didn't work in my tests.  `myodbc-installer` did.
      # So despite it being a MySQL tool, use it for SQLite too.
      #
      # Note: a "Setup" key is required for SQLite, for some reason.
      #
      sudo myodbc-installer -a -d -n "SQLite3 ODBC Driver" \
          -t "DRIVER=/usr/lib/x86_64-linux-gnu/odbc/libsqlite3odbc.so;SETUP=/usr/lib/x86_64-linux-gnu/odbc/libsqlite3odbc.so"

      # You need to run some command to get the database to be created.  This
      # seems the best answer in terms of actually creating a non-0 size file
      # that is most obviously "a SQLite database", while still being empty.
      #
      # https://stackoverflow.com/a/51455470
      #
      sqlite3 test.db "VACUUM;"

      # Register the DSN.  There are no usernames or passwords in SQLite.
      #
      sudo myodbc-installer -s -a -c2 -n "rebol-sqlite" \
          -t "DRIVER=SQLite3 ODBC Driver;DATABASE=$(pwd)/test.db"
    fi

  # FIREBIRD SETUP (ODBC not yet working with this, however)
  #
  # Not the most popular database around, but Firebird is used in Synapse EHR
  # under Rebol2.  On Linux it seems there are problems with the driver--these
  # may be because it does not support the "W" unicode functions correctly.
  # PyODBC seems to be able to communicate with it, however.
  #
  # !!! Even though it's not working yet, keeping what it takes to set it up
  # here serves as documentation of those steps.
  #
  - |
    if [[ $OS_ID = 0.4.40 ]]; then  # Firebird setup
      #
      # This is required to *build* the Firebird ODBC driver (the autodetect
      # looks for the shared library with no numeric extension).  It may not
      # be important beyond that, but do it anyway.
      #
      sudo ln -s /usr/lib/x86_64-linux-gnu/firebird/3.0/lib/libfbclient.so.2 /usr/lib/libfbclient.so

      # Need sudo privileges to run the Firebird SQL without a password (we
      # don't know the admin password as it was randomly generated).
      #
      echo "CREATE DATABASE \"test.fdb\";" | sudo isql-fb
      sudo chmod 777 test.fdb

      echo "CREATE USER test PASSWORD 'test-password';" | sudo isql-fb test.fdb

      # TBD: Find a way to get a copy of the Firebird ODBC driver libOdbcFb.so
      # Currently it's distributed via SourceForge (which sucks and has no
      # direct download links).  Also, if you go through their terrible JS
      # tricks to get a copy after waiting for a timer and looking at blinking
      # ads, you get an archive that has a "bad block" error when tar
      # unarchiving.  And it segfaults if you use it.  Building the driver
      # oneself is possible and it seems to run...so we could host it
      # somewhere, but this shows it's an uphill battle to support this.

      #wget http://example.com/wherever/libOdbcFb-some-version.so
      #sudo mv libOdbcFb-some-version.so /usr/lib/libOdbcFb.so
      echo "Temp Fake Odbc Driver File" > /usr/lib/libOdbcFb.so

      # IIRC this was needed to at some point because the ODBC client was not
      # finding the firebird client under its name, but called it "libgds.so"
      #
      sudo ln -s /usr/lib/x86_64-linux-gnu/libfbclient.so.3.0.2 /usr/lib/libgds.so

      # Register the ODBC Driver (edits %/etc/odbcinst.ini)
      #
      sudo myodbc-installer -a -d -n "Firebird" \
          -t "DRIVER=/usr/lib/libOdbcFb.so;SETUP=/usr/lib/libOdbcFb.so;Threading=1;FileUsage=1;CPTimeout=;CPReuse="

      # Register the DSN (edits %/etc/odbc.ini)
      #
      sudo myodbc-installer -s -a -c2 -n "rebol-firebird" \
          -t "DRIVER=Firebird;DBNAME=$(pwd)/test.fdb;USER=test;PASSWORD=test-password;ROLE=;CHARACTERSET=;READONLY=No;NOWAIT=No"

      # We must access via `test` user without root rights.
      # There is a need to be able to create lockfiles in the tmp directory.
      # !!! Is there a better way to do this?
      #
      chmod 777 /tmp/firebird
      chmod 777 /tmp/firebird/fb_init

      # Try a CREATE TABLE statement without root privileges
      #
      echo "CREATE TABLE simple (id int not null primary key);" \
        | isql-fb -user test -password test-password test.fdb
    fi

  # SANITY CHECKS
  - |
    if [[ $OS_ID = 0.4.40 ]]; then  # Sanity checks
      echo "ODBC Driver Configuration =>"
      myodbc-installer -d -l

      echo "Dumping /etc/odbcinst.ini"
      cat /etc/odbcinst.ini

      echo "ODBC Data Source Configuration =>"
      myodbc-installer -s -l

      echo "Dumping /etc/odbc.ini =>"
      cat /etc/odbc.ini

      echo "Listing /usr/lib/x86_64/linux-gnu/odbc/"
      ls /usr/lib/x86_64-linux-gnu/odbc/

      echo "Listing /usr/lib/x86_64/linux-gnu/odbc/"
      ls /usr/lib/x86_64-linux-gnu/odbc/

      echo "Listing /usr/local/lib"
      ls /usr/local/lib/
    fi

  - |
    function download { # src target
      echo "DOWNLOADING $1"
      curl -s $1 > $2
    }

  - |
    download "$CDN/$OS_ID/last-deploy.short-hash" last-deploy.short-hash
    hash=`cat last-deploy.short-hash`

  - |
    download $CDN/$OS_ID/r3-$hash-debug-cpp r3
    chmod +x r3
    rm last-deploy.short-hash

    # Although we've installed `libzmq3-dev`, we built on an earlier version
    # of Linux than the bionic one being used in this script (for technical
    # reasons of missing .so files needed by `myodbc-installer`).  But this
    # bionic Linux gets `libzmq.so.5` and not `libzmq.so.3`, despite asking
    # for `libzmq3-dev`.  The logic is presumably that it's backwards
    # compatible, but there's no symbolic link pointing libzmq.so.3 to reach
    # libzmq.so.5.  Doing so seems to make r3 run.
    #
    # !!! Really the ZeroMQ builds should statically link ZMQ, vs. dynamic.
  - |
    if [[ $OS_ID = 0.4.40 ]]; then
      sudo ln -s /usr/lib/x86_64-linux-gnu/libzmq.so.5 /usr/lib/libzmq.so.3
    fi

script:
  - |
    # whatever home directory Travis put us in, run there
    TOP_DIR="$(pwd)"  # https://stackoverflow.com/a/10795195/

  # Grab the abbreviated and full git commit ID into environment variables.
  # The full commit is passed to make to build into the binary, and the
  # abbreviated commit is used to name the executable.
  #
  # http://stackoverflow.com/a/42549385/211160
  #
  # !!! Written this way, this will be the git commit of the rebol-httpd
  # project, not the commit ID of the embedded Rebol executable.  It is
  # probably the case that the hash of the embedded Rebol makes more sense
  # to use, but this .travis.yml is a work in progress.
  #
  - GIT_COMMIT="$(git show --format="%H" --no-patch)"
  - echo "$GIT_COMMIT"
  - GIT_COMMIT_SHORT="$(git show --format="%h" --no-patch)"
  - echo "$GIT_COMMIT_SHORT"

# TEST STEPS
#
# The tests are designed to call QUIT and return 1 status on failure, with
# 0 returned on success.

  # For starters, this is a basic insert and retrieve test of Rebol values.
  # The goal is to store Rebol values into column types that can hold them,
  # and then read the same value back out after writing it.
  #
  # This runs against the DSNs of the MySQL and SQLite databases created by
  # the process above.
  #
  - ./r3 tests/odbc-test.reb rebol-mysql --mysql
  - ./r3 tests/odbc-test.reb rebol-sqlite --sqlite

# vim: set et sw=2:
